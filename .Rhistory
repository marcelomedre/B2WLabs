P8_merged <- merge(P8_sales_by_day, P8_CP_1_PT_1, by = "date", all = TRUE)
P8_CP_1_PT_2 <- temp_out_CP1_PT_2[[7]]
P8_CP_1_PT_2$PROD_ID <- NULL
P8_CP_1_PT_2$COMPETITOR <- NULL
P8_CP_1_PT_2$PAY_TYPE <- NULL
names(P8_CP_1_PT_2) <- c("date", "Price.C1.PT2")
P8_merged <- merge(P8_merged, P8_CP_1_PT_2, by = "date", all = TRUE)
P8_CP_2_PT_1 <- temp_out__CP2_PT_1[[7]]
P8_CP_2_PT_1$PROD_ID <- NULL
P8_CP_2_PT_1$COMPETITOR <- NULL
P8_CP_2_PT_1$PAY_TYPE <- NULL
names(P8_CP_2_PT_1) <- c("date", "Price.C2.PT1")
P8_merged <- merge(P8_merged, P8_CP_2_PT_1, by = "date", all = TRUE)
P8_CP_2_PT_2 <- temp_out_CP2_PT_2[[7]]
View(P8_CP_2_PT_2)
P8_CP_2_PT_2$PROD_ID <- NULL
P8_CP_2_PT_2$COMPETITOR <- NULL
P8_CP_2_PT_2$PAY_TYPE <- NULL
names(P8_CP_2_PT_2) <- c("date", "Price.C2.PT2")
P8_merged <- merge(P8_merged, P8_CP_2_PT_2, by = "date", all = TRUE)
P8_CP_3_PT_1 <- temp_out__CP3_PT_1[[7]]
View(P8_CP_3_PT_1)
P3_CP_3_PT_1$PROD_ID <- NULL
P3_CP_3_PT_1$COMPETITOR <- NULL
P3_CP_3_PT_1$PAY_TYPE <- NULL
names(P3_CP_3_PT_1) <- c("date", "Price.C3.PT1")
P8_CP_3_PT_1$PROD_ID <- NULL
P8_CP_3_PT_1$COMPETITOR <- NULL
P8_CP_3_PT_1$PAY_TYPE <- NULL
names(P8_CP_3_PT_1) <- c("date", "Price.C3.PT1")
P8_merged <- merge(P8_merged, P8_CP_3_PT_1, by = "date", all = TRUE)
P8_CP_3_PT_2 <- temp_out_CP3_PT_2[[4]]
View(P8_CP_3_PT_2)
P8_CP_3_PT_2 <- temp_out_CP3_PT_2[[5]]
P8_CP_3_PT_2 <- temp_out_CP3_PT_2[[6]]
P8_CP_3_PT_2 <- temp_out_CP3_PT_2[[7]]
P8_CP_3_PT_2$PROD_ID <- NULL
P8_CP_3_PT_2$COMPETITOR <- NULL
P8_CP_3_PT_2$PAY_TYPE <- NULL
names(P8_CP_3_PT_2) <- c("date", "Price.C3.PT2")
P8_merged <- merge(P8_merged, P8_CP_3_PT_2, by = "date", all = TRUE)
P8_CP_4_PT_1 <- temp_out__CP4_PT_1[[3]]
View(P8_CP_4_PT_1)
P8_CP_4_PT_1 <- temp_out__CP4_PT_1[[4]]
P8_CP_4_PT_1 <- temp_out__CP4_PT_1[[5]]
P8_CP_4_PT_1 <- temp_out__CP4_PT_1[[6]]
P8_CP_4_PT_1 <- temp_out__CP4_PT_1[[6]]
P8_CP_4_PT_1$PROD_ID <- NULL
P8_CP_4_PT_1$COMPETITOR <- NULL
P8_CP_4_PT_1$PAY_TYPE <- NULL
names(P8_CP_4_PT_1) <- c("date", "Price.C4.PT1")
P8_merged <- merge(P8_merged, P8_CP_4_PT_1, by = "date", all = TRUE)
P8_CP_4_PT_2 <- temp_out_CP4_PT_2[[3]]
View(P8_CP_4_PT_2)
P8_CP_4_PT_2 <- temp_out_CP4_PT_2[[4]]
P8_CP_4_PT_2 <- temp_out_CP4_PT_2[[5]]
P8_CP_4_PT_2 <- temp_out_CP4_PT_2[[6]]
P8_CP_4_PT_2$PROD_ID <- NULL
P8_CP_4_PT_2$COMPETITOR <- NULL
P8_CP_4_PT_2$PAY_TYPE <- NULL
names(P8_CP_4_PT_2) <- c("date", "Price.C4.PT2")
P8_merged <- merge(P8_merged, P8_CP_4_PT_2, by = "date", all = TRUE)
P8_CP_5_PT_1 <- temp_out__CP5_PT_1[[4]]
View(P8_CP_5_PT_1)
P8_CP_5_PT_1 <- temp_out__CP5_PT_1[[5]]
P8_CP_5_PT_1 <- temp_out__CP5_PT_1[[6]]
P8_CP_5_PT_2 <- temp_out_CP5_PT_2[[4]]
View(P8_CP_5_PT_2)
P8_CP_5_PT_2 <- temp_out_CP5_PT_2[[5]]
P8_CP_5_PT_2 <- temp_out_CP5_PT_2[[6]]
P8_CP_6_by_PT_1 <- temp_out__CP6_PT_1[[4]]
View(P8_CP_6_by_PT_1)
P8_CP_6_by_PT_1 <- temp_out__CP6_PT_1[[5]]
P8_CP_6_by_PT_1 <- temp_out__CP6_PT_1[[6]]
P8_CP_6_by_PT_1 <- temp_out__CP6_PT_1[[7]]
P8_CP_6_by_PT_1 <- temp_out__CP6_PT_1[[7]]
P8_CP_6_by_PT_1$PROD_ID <- NULL
P8_CP_6_by_PT_1$COMPETITOR <- NULL
P8_CP_6_by_PT_1$PAY_TYPE <- NULL
names(P8_CP_6_by_PT_1) <- c("date", "Price.C6.PT1")
P8_merged <- merge(P8_merged, P8_CP_6_by_PT_1, by = "date", all = TRUE)
P8_CP_6_PT_2 <- temp_out_CP6_PT_2[[4]]
View(P8_CP_6_PT_2)
P8_CP_6_PT_2 <- temp_out_CP6_PT_2[[5]]
P8_CP_6_PT_2 <- temp_out_CP6_PT_2[[6]]
P8_CP_6_PT_2 <- temp_out_CP6_PT_2[[7]]
P8_CP_6_PT_2$PROD_ID <- NULL
P8_CP_6_PT_2$COMPETITOR <- NULL
P8_CP_6_PT_2$PAY_TYPE <- NULL
names(P8_CP_6_PT_2) <- c("date", "Price.C6.PT2")
P8_merged <- merge(P8_merged, P8_CP_6_PT_2, by = "date", all = TRUE)
Price_P8 <- P8_merged[complete.cases(P8_merged),]
View(Price_P8)
Price_P8 <- Price_P8[,3:13]
Price_P8 <- rm.outlier(Price_P8, fill = TRUE, median = FALSE, opposite = FALSE)
cor_P8 <- cor(Price_P8)
corrplot(cor_P8, method = "number")
P9_sales_by_day <- temp_out[[9]]
names(P9_sales_by_day) <- c("date", "Prod", "Price")
P9_CP_1_PT_1 <- temp_out_PT_1[[4]]
View(P9_CP_1_PT_1)
P9_CP_1_PT_1 <- temp_out_PT_1[[5]]
P9_CP_1_PT_1 <- temp_out_PT_1[[6]]
P9_CP_1_PT_1 <- temp_out_PT_1[[7]]
P9_CP_1_PT_1 <- temp_out_PT_1[[8]]
P9_CP_1_PT_1$PROD_ID <- NULL
P9_CP_1_PT_1$COMPETITOR <- NULL
P9_CP_1_PT_1$PAY_TYPE <- NULL
names(P9_CP_1_PT_1) <- c("date", "Price.C1.PT1")
P9_merged <- merge(P9_sales_by_day, P9_CP_1_PT_1, by = "date", all = TRUE)
View(P9_merged)
P9_CP_1_PT_2 <- temp_out_CP1_PT_2[[7]]
View(P9_CP_1_PT_2)
P9_CP_1_PT_2 <- temp_out_CP1_PT_2[[8]]
P9_CP_1_PT_2$PROD_ID <- NULL
P9_CP_1_PT_2$COMPETITOR <- NULL
P9_CP_1_PT_2$PAY_TYPE <- NULL
names(P9_CP_1_PT_2) <- c("date", "Price.C1.PT2")
P9_merged <- merge(P9_merged, P9_CP_1_PT_2, by = "date", all = TRUE)
P9_CP_2_PT_1 <- temp_out__CP2_PT_1[[5]]
View(P9_CP_2_PT_1)
P9_CP_2_PT_1 <- temp_out__CP2_PT_1[[6]]
P9_CP_2_PT_1 <- temp_out__CP2_PT_1[[7]]
P9_CP_2_PT_1 <- temp_out__CP2_PT_1[[8]]
P9_CP_2_PT_1$PROD_ID <- NULL
P9_CP_2_PT_1$COMPETITOR <- NULL
P9_CP_2_PT_1$PAY_TYPE <- NULL
names(P9_CP_2_PT_1) <- c("date", "Price.C2.PT1")
P9_merged <- merge(P9_merged, P9_CP_2_PT_1, by = "date", all = TRUE)
P9_CP_2_PT_2 <- temp_out_CP2_PT_2[[8]]
View(P9_CP_2_PT_2)
P9_CP_2_PT_2$PROD_ID <- NULL
P9_CP_2_PT_2$COMPETITOR <- NULL
P9_CP_2_PT_2$PAY_TYPE <- NULL
names(P9_CP_2_PT_2) <- c("date", "Price.C2.PT2")
P9_merged <- merge(P9_merged, P9_CP_2_PT_2, by = "date", all = TRUE)
P9_CP_3_PT_1 <- temp_out__CP3_PT_1[[5]]
View(P9_CP_3_PT_1)
P9_CP_3_PT_1 <- temp_out__CP3_PT_1[[6]]
P9_CP_3_PT_1 <- temp_out__CP3_PT_1[[7]]
P9_CP_3_PT_1 <- temp_out__CP3_PT_1[[8]]
P9_CP_3_PT_1$PROD_ID <- NULL
P9_CP_3_PT_1$COMPETITOR <- NULL
P9_CP_3_PT_1$PAY_TYPE <- NULL
names(P9_CP_3_PT_1) <- c("date", "Price.C3.PT1")
P9_merged <- merge(P9_merged, P9_CP_3_PT_1, by = "date", all = TRUE)
P9_CP_3_PT_2 <- temp_out_CP3_PT_2[[8]]
View(P9_CP_3_PT_2)
P9_CP_3_PT_2$PROD_ID <- NULL
P9_CP_3_PT_2$COMPETITOR <- NULL
P9_CP_3_PT_2$PAY_TYPE <- NULL
names(P9_CP_3_PT_2) <- c("date", "Price.C3.PT2")
P9_merged <- merge(P9_merged, P9_CP_3_PT_2, by = "date", all = TRUE)
P9_CP_4_PT_1 <- temp_out__CP4_PT_1[[5]]
View(P9_CP_4_PT_1)
P9_CP_4_PT_1 <- temp_out__CP4_PT_1[[6]]
P9_CP_4_PT_1 <- temp_out__CP4_PT_1[[7]]
P9_CP_4_PT_2 <- temp_out_CP4_PT_2[[5]]
View(P9_CP_4_PT_2)
P9_CP_4_PT_2 <- temp_out_CP4_PT_2[[6]]
P9_CP_4_PT_2 <- temp_out_CP4_PT_2[[7]]
P9_CP_5_PT_1 <- temp_out__CP5_PT_1[[4]]
View(P9_CP_5_PT_1)
P9_CP_5_PT_1 <- temp_out__CP5_PT_1[[5]]
P9_CP_5_PT_1 <- temp_out__CP5_PT_1[[6]]
P9_CP_5_PT_1 <- temp_out__CP5_PT_1[[7]]
P9_CP_5_PT_1$PROD_ID <- NULL
P9_CP_5_PT_1$COMPETITOR <- NULL
P9_CP_5_PT_1$PAY_TYPE <- NULL
names(P9_CP_5_PT_1) <- c("date", "Price.C5.PT1")
P9_merged <- merge(P9_merged, P9_CP_5_PT_1, by = "date", all = TRUE)
P9_CP_5_PT_2 <- temp_out_CP5_PT_2[[7]]
View(P9_CP_5_PT_2)
P9_CP_5_PT_2$PROD_ID <- NULL
P9_CP_5_PT_2$COMPETITOR <- NULL
P9_CP_5_PT_2$PAY_TYPE <- NULL
names(P9_CP_5_PT_2) <- c("date", "Price.C5.PT2")
P9_merged <- merge(P9_merged, P9_CP_5_PT_2, by = "date", all = TRUE)
P9_CP_6_by_PT_1 <- temp_out__CP6_PT_1[[5]]
View(P9_CP_6_by_PT_1)
P9_CP_6_by_PT_1 <- temp_out__CP6_PT_1[[6]]
P9_CP_6_by_PT_1 <- temp_out__CP6_PT_1[[7]]
P9_CP_6_by_PT_1 <- temp_out__CP6_PT_1[[8]]
P9_CP_6_by_PT_1$PROD_ID <- NULL
P9_CP_6_by_PT_1$COMPETITOR <- NULL
P9_CP_6_by_PT_1$PAY_TYPE <- NULL
names(P9_CP_6_by_PT_1) <- c("date", "Price.C6.PT1")
P9_merged <- merge(P9_merged, P9_CP_6_by_PT_1, by = "date", all = TRUE)
P9_CP_6_PT_2 <- temp_out_CP6_PT_2[[8]]
View(P9_CP_6_PT_2)
P9_CP_6_PT_2 <- temp_out_CP6_PT_2[[8]]
P9_CP_6_PT_2$PROD_ID <- NULL
P9_CP_6_PT_2$COMPETITOR <- NULL
P9_CP_6_PT_2$PAY_TYPE <- NULL
names(P9_CP_6_PT_2) <- c("date", "Price.C6.PT2")
P9_merged <- merge(P9_merged, P9_CP_6_PT_2, by = "date", all = TRUE)
Price_P9 <- P9_merged[complete.cases(P9_merged),]
View(Price_P9)
Price_P9 <- Price_P9[,3:13]
Price_P9 <- rm.outlier(Price_P9, fill = TRUE, median = FALSE, opposite = FALSE)
cor_P9 <- cor(Price_P9)
corrplot(cor_P9, method = "number")
setwd("C:/Users/Marcelo/Desktop/Data Science/B2W Labs/B2WLabs/")
rm(list = ls())
rmse <- function(error)
{
sqrt(mean(error^2))
}
Prod01 <- read.csv("P1_sales_by_weekday_month.csv.csv", header = TRUE, stringsAsFactors = FALSE)
Prod01 <- read.csv("P1_sales_by_weekday_month.csv", header = TRUE, stringsAsFactors = FALSE)
View(Prod01)
P1_sales_by_weekday_month <- read.csv("P1_sales_by_weekday_month.csv", header = TRUE, stringsAsFactors = FALSE)
ggplot(P1_sales_by_weekday_month, aes(x = day, y = QTY_ORDER))+
geom_point(data = P1_sales_by_weekday_month, aes(group = day, color = factor(month)), size = 3)+
geom_smooth()+
geom_line(data = P1_sales_by_weekday_month, aes(group = month, color = factor(month)))+
xlab("Dia da Semana")+
ylab("Quantidade vendida Produto 1")
ggplot(P1_sales_by_weekday_month, aes(x = 1:63, y = QTY_ORDER))+
geom_point(data = P1_sales_by_weekday_month, aes(group = day, color = factor(month)), size = 3)+
geom_smooth()+
geom_line(data = P1_sales_by_weekday_month, aes(group = month, color = factor(month)))+
xlab("Dias da Semana ao longo dos meses")+
ylab("Quantidade vendida Produto 1")
plot(P1_sales_by_weekday_month$Price, P1_sales_by_weekday_month$QTY_ORDER)
cor(P1_sales_by_weekday_month$Price, P1_sales_by_weekday_month$QTY_ORDER)
cor(P1_sales_by_weekday_month$Price, P1_sales_by_weekday_month$QTY_ORDER)
regP1 <- lm(QTY_ORDER ~ Price, data = P1_sales_by_weekday_month)
regP1$coefficients
plot(P1_sales_by_weekday_month$Price, P1_sales_by_weekday_month$QTY_ORDER)
plot(log(P1_sales_by_weekday_month$Price), P1_sales_by_weekday_month$QTY_ORDER)
summary(regP1)
plot(P1_sales_by_weekday_month$Price, P1_sales_by_weekday_month$QTY_ORDER)
abline(regP1, col = "blue")
View(P1_sales_by_weekday_month)
P1_sales_by_weekday_month$PROD_ID <- NULL
data_P2 <- P2[,-(4)]
data_P2 <- P1_sales_by_weekday_month[,-(4)]
View(data_P2)
maxs <- apply(data_P2, 2, max)
mins <- apply(data_P2, 2, min)
P2_scaled <- as.data.frame(scale(data_P2, center = mins, scale = maxs - mins))
b <- maxs - mins
a <- mins
plot(P2_scaled$Price, P2_scaled$QTY_ORDER)
names(P2_scaled)
View(P2_scaled)
feats <- names(P2_scaled)[-(3)]
f <- paste(feats, collapse = " + ")
f <- as.formula(paste("QTY_ORDER ~", f))
f
library(neuralnet)
library(caTools)
?neuralnel
?neuralnet
split = sample.split(P2_scaled$Price, SplitRatio = 0.80)
train_nn <- subset(P2_scaled, split == TRUE)
val_nn <- subset(P2_scaled, split == FALSE)
nn <- neuralnet(f, train_nn, rep = 15, hidden = 5, linear.output = FALSE)
plot(nn)
predicted <- compute(nn, val_nn)
predicted <- compute(nn, val_nn[,(-3]))
predicted <- compute(nn, val_nn[(-3]))
val_resp <- val_nn$QTY_ORDER
val_nn$QTY_ORDER <- NULL
predicted <- compute(nn, val_nn)
print(head(predicted$net.result))
results <- as.data.frame(cbind(val_nn, val_resp, predicted$net.result))
View(results)
error <- val_resp - predicted$net.result
RMSE <- rmse(error)
RMSE
rdois <- lm(QTY_ORDER ~ predicted$net.result, data = results)
rdois <- lm(val_resp ~ predicted$net.result, data = results)
summary(rdois)$r.squared
plot(results$val_resp, predicted$net.result)
abline(0,1, col = "red")
plot(density(resid(rdois)))
ggplot(results, aes(x = Price, y = val_resp))+
geom_point()+
geom_point(aes(y = predicted$net.result), col = "red")
ggplot(results, aes(x = Price, y = val_resp))+
geom_point(size = 4)+
geom_point(aes(y = predicted$net.result), col = "red")
nn <- neuralnet(f, train_nn, rep = 15, hidden = c(5,3), linear.output = FALSE)
plot(nn)
val_resp <- val_nn$QTY_ORDER
val_nn$QTY_ORDER <- NULL
predicted <- compute(nn, val_nn)
print(head(predicted$net.result))
results <- as.data.frame(cbind(val_nn, val_resp, predicted$net.result))
predicted$net.result
results <- as.data.frame(cbind(val_nn, val_resp, predicted$net.result))
split = sample.split(P2_scaled$Price, SplitRatio = 0.80)
train_nn <- subset(P2_scaled, split == TRUE)
val_nn <- subset(P2_scaled, split == FALSE)
set.seed(123)
split = sample.split(P2_scaled$Price, SplitRatio = 0.80)
train_nn <- subset(P2_scaled, split == TRUE)
val_nn <- subset(P2_scaled, split == FALSE)
val_resp <- val_nn$QTY_ORDER # saving test results
nn <- neuralnet(f, train_nn, rep = 15, hidden = c(5,3), linear.output = FALSE)
plot(nn)
val_nn$QTY_ORDER <- NULL
predicted <- compute(nn, val_nn)
print(head(predicted$net.result))
results <- as.data.frame(cbind(val_nn, val_resp, predicted$net.result))
error <- val_resp - predicted$net.result
RMSE <- rmse(error)
RMSE
rdois <- lm(val_resp ~ predicted$net.result, data = results)
summary(rdois)$r.squared
plot(results$val_resp, predicted$net.result)
abline(0,1, col = "red")
plot(density(resid(rdois)))
ggplot(results, aes(x = Price, y = val_resp))+
geom_point(size = 4)+
geom_point(aes(y = predicted$net.result), col = "red")
nn <- neuralnet(f, train_nn, rep = 15, hidden = 10, linear.output = FALSE)
plot(nn)
predicted <- compute(nn, val_nn)
print(head(predicted$net.result))
results <- as.data.frame(cbind(val_nn, val_resp, predicted$net.result))
View(results)
error <- val_resp - predicted$net.result
RMSE <- rmse(error)
RMSE
rdois <- lm(val_resp ~ predicted$net.result, data = results)
summary(rdois)$r.squared
plot(results$val_resp, predicted$net.result)
abline(0,1, col = "red")
plot(density(resid(rdois)))
ggplot(results, aes(x = Price, y = val_resp))+
geom_point(size = 4)+
geom_point(aes(y = predicted$net.result), col = "red")
?neuralnet
nn <- neuralnet(f, train_nn, rep = 15, hidden = 10, threshold = 0.1,
learningrate = 0.01, linear.output = FALSE)
predicted <- compute(nn, val_nn)
print(head(predicted$net.result))
results <- as.data.frame(cbind(val_nn, val_resp, predicted$net.result))
error <- val_resp - predicted$net.result
RMSE <- rmse(error)
RMSE
summary(rdois)$r.squared
rdois <- lm(val_resp ~ predicted$net.result, data = results)
summary(rdois)$r.squared
nn <- neuralnet(f, train_nn, rep = 15, hidden = 10, threshold = 0.01, linear.output = FALSE)
predicted <- compute(nn, val_nn)
print(head(predicted$net.result))
results <- as.data.frame(cbind(val_nn, val_resp, predicted$net.result))
error <- val_resp - predicted$net.result
RMSE <- rmse(error)
RMSE
rdois <- lm(val_resp ~ predicted$net.result, data = results)
summary(rdois)$r.squared
nn <- neuralnet(f, train_nn, rep = 15, hidden = 4, threshold = 0.01, linear.output = FALSE)
predicted <- compute(nn, val_nn)
print(head(predicted$net.result))
results <- as.data.frame(cbind(val_nn, val_resp, predicted$net.result))
error <- val_resp - predicted$net.result
RMSE <- rmse(error)
RMSE
rdois <- lm(val_resp ~ predicted$net.result, data = results)
summary(rdois)$r.squared
nn <- neuralnet(f, train_nn, rep = 50, hidden = 4, threshold = 0.01, linear.output = FALSE)
predicted <- compute(nn, val_nn)
print(head(predicted$net.result))
results <- as.data.frame(cbind(val_nn, val_resp, predicted$net.result))
error <- val_resp - predicted$net.result
RMSE <- rmse(error)
RMSE
rdois <- lm(val_resp ~ predicted$net.result, data = results)
summary(rdois)$r.squared
plot(results$val_resp, predicted$net.result)
abline(0,1, col = "red")
set.seed(1234)
split = sample.split(P2_scaled$Price, SplitRatio = 0.80)
train_nn <- subset(P2_scaled, split == TRUE)
val_nn <- subset(P2_scaled, split == FALSE)
val_resp <- val_nn$QTY_ORDER # saving test results
val_nn$QTY_ORDER <- NULL
nn <- neuralnet(f, train_nn, rep = 50, hidden = 5, threshold = 0.01, linear.output = FALSE)
predicted <- compute(nn, val_nn)
print(head(predicted$net.result))
results <- as.data.frame(cbind(val_nn, val_resp, predicted$net.result))
error <- val_resp - predicted$net.result
RMSE <- rmse(error)
RMSE
rdois <- lm(val_resp ~ predicted$net.result, data = results)
summary(rdois)$r.squared
plot(results$val_resp, predicted$net.result)
abline(0,1, col = "red")
ggplot(results, aes(x = Price, y = val_resp))+
geom_point(size = 4)+
geom_point(aes(y = predicted$net.result), col = "red")
library(e1071)
split = sample.split(data_P2$Price, SplitRatio = 0.75)
train <- subset(data_P3, split == TRUE)
train <- subset(data_P2, split == TRUE)
val <- subset(data_P2, split == FALSE)
model_svm <- svm(f, data = train, scale = TRUE, kernel = 'radial',
cachesize = 1600, cross = 5, epsilon = 0.2)
svm_val <- predict(model_svm, val)
results_svm <- as.data.frame(cbind(val, svm_val))
View(results_svm)
error <- results_svm$QTY_ORDER - svm_val
RMSE <- rmse(error)
RMSE
rdois <- lm(QTY_ORDER ~ svm_val, data = results)
rdois <- lm(QTY_ORDER ~ svm_val, data = results_svm)
summary(rdois)$r.squared
plot(results_svm$QTY_ORDER, results_svm$svm_val)
abline(0,1, col = "red")
abline(rdois, col = "blue")
ggplot(results, aes(x = Price, y = QTY_ORDER))+
geom_point(size = 4)+
geom_point(aes(y = results_svm$svm_val), col = "red")
ggplot(results_svm, aes(x = Price, y = QTY_ORDER))+
geom_point(size = 4)+
geom_point(aes(y = results_svm$svm_val), col = "red")
model_svm <- tune(svm, f, data = train, scale = TRUE, kernel = 'radial',
cachesize = 2000, ranges = list(epsilon = seq(0,1,0.1), cost = 2^(2:9)))
print(model_svm)
plot(model_svm)
model_svm <- tune(svm, QTY_ORDER ~ ., data = train, scale = TRUE, kernel = 'radial',
cachesize = 2000, ranges = list(epsilon = seq(0.2,0.6,0.01), cost = 2^(2:6)))
model_svm <- tune(svm, f, data = train, scale = TRUE, kernel = 'radial',
cachesize = 2000, ranges = list(epsilon = seq(0.2,0.6,0.01), cost = 2^(2:6)))
print(model_svm)
plot(model_svm)
summary(model_svm)
model_P1 <- model_svm$best.model
results_svm <- predict(model_P1, val)
results_svm_ref <- as.data.frame(cbind(val, results_svm))
View(results_svm_ref)
error <- results_svm_ref$QTY_ORDER - results_svm
RMSE <- rmse(error)
RMSE
rdois <- lm(QTY_ORDER ~ results_svm, data = results_svm_ref)
summary(rdois)$r.squared
plot(results_svm_ref$QTY_ORDER, results_svm_ref$results_svm)
abline(0,1, col = "red")
abline(rdois, col = "blue")
ggplot(results_svm_ref, aes(x = Price, y = QTY_ORDER))+
geom_point(size = 4)+
geom_point(aes(y = results_svm_ref$results_svm), col = "red")
error <- predicted$net.result - val_resp
RMSE <- rmse(error)
RMSE
?if
for (i in 1:10){
nn <- neuralnet(f, train_nn, rep = 50, hidden = i, threshold = 0.001,
linear.output = FALSE)
# plot(nn)
# Compute predictions
predicted <- compute(nn, val_nn)
print(head(predicted$net.result))
results <- as.data.frame(cbind(val_nn, val_resp, predicted$net.result))
error <- predicted$net.result - val_resp
RMSE[i] <- rmse(error)
RMSE[i]
# r2 validation sample
rdois <- lm(val_resp ~ predicted$net.result, data = results)
summary(rdois)$r.squared
#r^2 = 0.617
plot(results$val_resp, predicted$net.result)
abline(0,1, col = "red")
ggplot(results, aes(x = Price, y = val_resp))+
geom_point(size = 4)+
geom_point(aes(y = predicted$net.result), col = "red")
if(RMSE[i] < RMSE){
RMSE <- RMSE[i]
netb <- nn
}
}
View(val_nn)
nn <- neuralnet(f, train_nn, rep = 50, hidden = 5, threshold = 0.001,
linear.output = FALSE)
nn$result.matrix
?neuralnet
nn$response
nn$call
nn$err.fct
nn$act.fct
nn <- neuralnet(f, train_nn, rep = 50, hidden = 5, threshold = 0.0001,
linear.output = FALSE)
library(car)
library(caret)
my.grid <- expand.grid(.decay = c(0.5, 0.1), .size = c(5, 6, 7))
P1.fit <- train(f, data = train, method = "nnet", maxit = 3000,
tuneGrid = my.grid, trace = F, linout = 1)
library(nnet)
P1.fit <- train(f, data = train, method = "nnet", maxit = 3000,
tuneGrid = my.grid, trace = F, linout = 1)
?train
my.grid <- expand.grid(.decay = c(0.5, 0.1), .size = c(5, 6, 7))
P1.fit <- train(f, data = train_nn, method = "nnet", maxit = 3000,
tuneGrid = my.grid, trace = F, linout = 1)
model <- P1.fit$bestTune
model
plot(model)
predicted <- predict(P1.fit, newdata = val_nn)
prestige.rmse <- sqrt(mean((predicted - val_resp)^2))
prestige.rmse
results <- as.data.frame(cbind(val_nn, val_resp, predicted))
View(results)
View(results)
View(results)
ggplot(results, aes(x = Price, y = val_resp))+
geom_point(size = 4)+
geom_point(aes(y = predicted), col = "red")
