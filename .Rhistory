plot(nn)
predicted <- compute(nn, val_nn)
predicted <- compute(nn, val_nn[,(-3]))
predicted <- compute(nn, val_nn[(-3]))
val_resp <- val_nn$QTY_ORDER
val_nn$QTY_ORDER <- NULL
predicted <- compute(nn, val_nn)
print(head(predicted$net.result))
results <- as.data.frame(cbind(val_nn, val_resp, predicted$net.result))
View(results)
error <- val_resp - predicted$net.result
RMSE <- rmse(error)
RMSE
rdois <- lm(QTY_ORDER ~ predicted$net.result, data = results)
rdois <- lm(val_resp ~ predicted$net.result, data = results)
summary(rdois)$r.squared
plot(results$val_resp, predicted$net.result)
abline(0,1, col = "red")
plot(density(resid(rdois)))
ggplot(results, aes(x = Price, y = val_resp))+
geom_point()+
geom_point(aes(y = predicted$net.result), col = "red")
ggplot(results, aes(x = Price, y = val_resp))+
geom_point(size = 4)+
geom_point(aes(y = predicted$net.result), col = "red")
nn <- neuralnet(f, train_nn, rep = 15, hidden = c(5,3), linear.output = FALSE)
plot(nn)
val_resp <- val_nn$QTY_ORDER
val_nn$QTY_ORDER <- NULL
predicted <- compute(nn, val_nn)
print(head(predicted$net.result))
results <- as.data.frame(cbind(val_nn, val_resp, predicted$net.result))
predicted$net.result
results <- as.data.frame(cbind(val_nn, val_resp, predicted$net.result))
split = sample.split(P2_scaled$Price, SplitRatio = 0.80)
train_nn <- subset(P2_scaled, split == TRUE)
val_nn <- subset(P2_scaled, split == FALSE)
set.seed(123)
split = sample.split(P2_scaled$Price, SplitRatio = 0.80)
train_nn <- subset(P2_scaled, split == TRUE)
val_nn <- subset(P2_scaled, split == FALSE)
val_resp <- val_nn$QTY_ORDER # saving test results
nn <- neuralnet(f, train_nn, rep = 15, hidden = c(5,3), linear.output = FALSE)
plot(nn)
val_nn$QTY_ORDER <- NULL
predicted <- compute(nn, val_nn)
print(head(predicted$net.result))
results <- as.data.frame(cbind(val_nn, val_resp, predicted$net.result))
error <- val_resp - predicted$net.result
RMSE <- rmse(error)
RMSE
rdois <- lm(val_resp ~ predicted$net.result, data = results)
summary(rdois)$r.squared
plot(results$val_resp, predicted$net.result)
abline(0,1, col = "red")
plot(density(resid(rdois)))
ggplot(results, aes(x = Price, y = val_resp))+
geom_point(size = 4)+
geom_point(aes(y = predicted$net.result), col = "red")
nn <- neuralnet(f, train_nn, rep = 15, hidden = 10, linear.output = FALSE)
plot(nn)
predicted <- compute(nn, val_nn)
print(head(predicted$net.result))
results <- as.data.frame(cbind(val_nn, val_resp, predicted$net.result))
View(results)
error <- val_resp - predicted$net.result
RMSE <- rmse(error)
RMSE
rdois <- lm(val_resp ~ predicted$net.result, data = results)
summary(rdois)$r.squared
plot(results$val_resp, predicted$net.result)
abline(0,1, col = "red")
plot(density(resid(rdois)))
ggplot(results, aes(x = Price, y = val_resp))+
geom_point(size = 4)+
geom_point(aes(y = predicted$net.result), col = "red")
?neuralnet
nn <- neuralnet(f, train_nn, rep = 15, hidden = 10, threshold = 0.1,
learningrate = 0.01, linear.output = FALSE)
predicted <- compute(nn, val_nn)
print(head(predicted$net.result))
results <- as.data.frame(cbind(val_nn, val_resp, predicted$net.result))
error <- val_resp - predicted$net.result
RMSE <- rmse(error)
RMSE
summary(rdois)$r.squared
rdois <- lm(val_resp ~ predicted$net.result, data = results)
summary(rdois)$r.squared
nn <- neuralnet(f, train_nn, rep = 15, hidden = 10, threshold = 0.01, linear.output = FALSE)
predicted <- compute(nn, val_nn)
print(head(predicted$net.result))
results <- as.data.frame(cbind(val_nn, val_resp, predicted$net.result))
error <- val_resp - predicted$net.result
RMSE <- rmse(error)
RMSE
rdois <- lm(val_resp ~ predicted$net.result, data = results)
summary(rdois)$r.squared
nn <- neuralnet(f, train_nn, rep = 15, hidden = 4, threshold = 0.01, linear.output = FALSE)
predicted <- compute(nn, val_nn)
print(head(predicted$net.result))
results <- as.data.frame(cbind(val_nn, val_resp, predicted$net.result))
error <- val_resp - predicted$net.result
RMSE <- rmse(error)
RMSE
rdois <- lm(val_resp ~ predicted$net.result, data = results)
summary(rdois)$r.squared
nn <- neuralnet(f, train_nn, rep = 50, hidden = 4, threshold = 0.01, linear.output = FALSE)
predicted <- compute(nn, val_nn)
print(head(predicted$net.result))
results <- as.data.frame(cbind(val_nn, val_resp, predicted$net.result))
error <- val_resp - predicted$net.result
RMSE <- rmse(error)
RMSE
rdois <- lm(val_resp ~ predicted$net.result, data = results)
summary(rdois)$r.squared
plot(results$val_resp, predicted$net.result)
abline(0,1, col = "red")
set.seed(1234)
split = sample.split(P2_scaled$Price, SplitRatio = 0.80)
train_nn <- subset(P2_scaled, split == TRUE)
val_nn <- subset(P2_scaled, split == FALSE)
val_resp <- val_nn$QTY_ORDER # saving test results
val_nn$QTY_ORDER <- NULL
nn <- neuralnet(f, train_nn, rep = 50, hidden = 5, threshold = 0.01, linear.output = FALSE)
predicted <- compute(nn, val_nn)
print(head(predicted$net.result))
results <- as.data.frame(cbind(val_nn, val_resp, predicted$net.result))
error <- val_resp - predicted$net.result
RMSE <- rmse(error)
RMSE
rdois <- lm(val_resp ~ predicted$net.result, data = results)
summary(rdois)$r.squared
plot(results$val_resp, predicted$net.result)
abline(0,1, col = "red")
ggplot(results, aes(x = Price, y = val_resp))+
geom_point(size = 4)+
geom_point(aes(y = predicted$net.result), col = "red")
library(e1071)
split = sample.split(data_P2$Price, SplitRatio = 0.75)
train <- subset(data_P3, split == TRUE)
train <- subset(data_P2, split == TRUE)
val <- subset(data_P2, split == FALSE)
model_svm <- svm(f, data = train, scale = TRUE, kernel = 'radial',
cachesize = 1600, cross = 5, epsilon = 0.2)
svm_val <- predict(model_svm, val)
results_svm <- as.data.frame(cbind(val, svm_val))
View(results_svm)
error <- results_svm$QTY_ORDER - svm_val
RMSE <- rmse(error)
RMSE
rdois <- lm(QTY_ORDER ~ svm_val, data = results)
rdois <- lm(QTY_ORDER ~ svm_val, data = results_svm)
summary(rdois)$r.squared
plot(results_svm$QTY_ORDER, results_svm$svm_val)
abline(0,1, col = "red")
abline(rdois, col = "blue")
ggplot(results, aes(x = Price, y = QTY_ORDER))+
geom_point(size = 4)+
geom_point(aes(y = results_svm$svm_val), col = "red")
ggplot(results_svm, aes(x = Price, y = QTY_ORDER))+
geom_point(size = 4)+
geom_point(aes(y = results_svm$svm_val), col = "red")
model_svm <- tune(svm, f, data = train, scale = TRUE, kernel = 'radial',
cachesize = 2000, ranges = list(epsilon = seq(0,1,0.1), cost = 2^(2:9)))
print(model_svm)
plot(model_svm)
model_svm <- tune(svm, QTY_ORDER ~ ., data = train, scale = TRUE, kernel = 'radial',
cachesize = 2000, ranges = list(epsilon = seq(0.2,0.6,0.01), cost = 2^(2:6)))
model_svm <- tune(svm, f, data = train, scale = TRUE, kernel = 'radial',
cachesize = 2000, ranges = list(epsilon = seq(0.2,0.6,0.01), cost = 2^(2:6)))
print(model_svm)
plot(model_svm)
summary(model_svm)
model_P1 <- model_svm$best.model
results_svm <- predict(model_P1, val)
results_svm_ref <- as.data.frame(cbind(val, results_svm))
View(results_svm_ref)
error <- results_svm_ref$QTY_ORDER - results_svm
RMSE <- rmse(error)
RMSE
rdois <- lm(QTY_ORDER ~ results_svm, data = results_svm_ref)
summary(rdois)$r.squared
plot(results_svm_ref$QTY_ORDER, results_svm_ref$results_svm)
abline(0,1, col = "red")
abline(rdois, col = "blue")
ggplot(results_svm_ref, aes(x = Price, y = QTY_ORDER))+
geom_point(size = 4)+
geom_point(aes(y = results_svm_ref$results_svm), col = "red")
error <- predicted$net.result - val_resp
RMSE <- rmse(error)
RMSE
?if
for (i in 1:10){
nn <- neuralnet(f, train_nn, rep = 50, hidden = i, threshold = 0.001,
linear.output = FALSE)
# plot(nn)
# Compute predictions
predicted <- compute(nn, val_nn)
print(head(predicted$net.result))
results <- as.data.frame(cbind(val_nn, val_resp, predicted$net.result))
error <- predicted$net.result - val_resp
RMSE[i] <- rmse(error)
RMSE[i]
# r2 validation sample
rdois <- lm(val_resp ~ predicted$net.result, data = results)
summary(rdois)$r.squared
#r^2 = 0.617
plot(results$val_resp, predicted$net.result)
abline(0,1, col = "red")
ggplot(results, aes(x = Price, y = val_resp))+
geom_point(size = 4)+
geom_point(aes(y = predicted$net.result), col = "red")
if(RMSE[i] < RMSE){
RMSE <- RMSE[i]
netb <- nn
}
}
View(val_nn)
nn <- neuralnet(f, train_nn, rep = 50, hidden = 5, threshold = 0.001,
linear.output = FALSE)
nn$result.matrix
?neuralnet
nn$response
nn$call
nn$err.fct
nn$act.fct
nn <- neuralnet(f, train_nn, rep = 50, hidden = 5, threshold = 0.0001,
linear.output = FALSE)
library(car)
library(caret)
my.grid <- expand.grid(.decay = c(0.5, 0.1), .size = c(5, 6, 7))
P1.fit <- train(f, data = train, method = "nnet", maxit = 3000,
tuneGrid = my.grid, trace = F, linout = 1)
library(nnet)
P1.fit <- train(f, data = train, method = "nnet", maxit = 3000,
tuneGrid = my.grid, trace = F, linout = 1)
?train
my.grid <- expand.grid(.decay = c(0.5, 0.1), .size = c(5, 6, 7))
P1.fit <- train(f, data = train_nn, method = "nnet", maxit = 3000,
tuneGrid = my.grid, trace = F, linout = 1)
model <- P1.fit$bestTune
model
plot(model)
predicted <- predict(P1.fit, newdata = val_nn)
prestige.rmse <- sqrt(mean((predicted - val_resp)^2))
prestige.rmse
results <- as.data.frame(cbind(val_nn, val_resp, predicted))
View(results)
View(results)
View(results)
ggplot(results, aes(x = Price, y = val_resp))+
geom_point(size = 4)+
geom_point(aes(y = predicted), col = "red")
setwd("C:/Users/Marcelo/Desktop/Data/B2WLabs/")
rm(list = ls())
P1_sales_by_weekday_month <- read.csv("P1_sales_by_weekday_month.csv", header = TRUE, stringsAsFactors = FALSE)
P1_sales_by_weekday_month$PROD_ID <- NULL
ggplot(P1_sales_by_weekday_month, aes(x = 1:63, y = QTY_ORDER))+
geom_point(data = P1_sales_by_weekday_month, aes(group = day, color = factor(month)), size = 3)+
geom_smooth()+
geom_line(data = P1_sales_by_weekday_month, aes(group = month, color = factor(month)))+
xlab("Dias da Semana ao longo dos meses")+
ylab("Quantidade vendida Produto 1")
library(ggplot2)
ggplot(P1_sales_by_weekday_month, aes(x = 1:63, y = QTY_ORDER))+
geom_point(data = P1_sales_by_weekday_month, aes(group = day, color = factor(month)), size = 3)+
geom_smooth()+
geom_line(data = P1_sales_by_weekday_month, aes(group = month, color = factor(month)))+
xlab("Dias da Semana ao longo dos meses")+
ylab("Quantidade vendida Produto 1")
plot(P1_sales_by_weekday_month$Price, P1_sales_by_weekday_month$QTY_ORDER)
cor(P1_sales_by_weekday_month$Price, P1_sales_by_weekday_month$QTY_ORDER)
regP1 <- lm(QTY_ORDER ~ Price, data = P1_sales_by_weekday_month)
summary(regP1)
summary(regP1)
regP1$residuals
mean(regP1$residuals)
?histogram
hist(regP1$residuals)
lines(density(regP1$residuals))
hist(regP1$residuals)
lines(density(regP1$residuals))
lines(density(regP1$residuals))
lines(regP1$residuals))
hist(regP1$residuals,prob = TRUE)
lines(density(regP1$residuals))
lines(density(regP1$residuals), col = "red")
regP1$fitted.values
plot(regP1$fitted.values, P1_sales_by_weekday_month$QTY_ORDER)
abline(regP1, col = "blue")
abline(regP1, col = "blue")
plot(P1_sales_by_weekday_month$Price, P1_sales_by_weekday_month$QTY_ORDER)
abline(regP1, col = "blue")
data_P2 <- P1_sales_by_weekday_month[,-(4)] # removing Revenue column
maxs <- apply(data_P2, 2, max)
mins <- apply(data_P2, 2, min)
P2_scaled <- as.data.frame(scale(data_P2, center = mins, scale = maxs - mins))
b <- maxs - mins
a <- mins
plot(P2_scaled$Price, P2_scaled$QTY_ORDER)
names(P2_scaled)
feats <- names(P2_scaled)[-(3)]
f <- paste(feats, collapse = " + ")
f <- as.formula(paste("QTY_ORDER ~", f))
f
library(neuralnet)
library(caTools)
set.seed(1234)
split = sample.split(P2_scaled$Price, SplitRatio = 0.80)
train_nn <- subset(P2_scaled, split == TRUE)
val_nn <- subset(P2_scaled, split == FALSE)
val_resp <- val_nn$QTY_ORDER # saving test results
val_nn$QTY_ORDER <- NULL
library(car)
library(caret)
library(nnet)
?tuneGrid
my.grid <- expand.grid(.decay = c(0.5, 0.1), .size = c(5, 6, 7))
my.grid <- expand.grid(.decay = c(0.5, 0.1), .size = c(3, 4, 5, 6, 7, 8, 9))
View(my.grid)
my.grid <- expand.grid(.decay = c(0.3, 0.2, 0.1), .size = c(3, 4, 5, 6, 7, 8, 9))
?train
?nnet
P1.fit <- train(f, data = train_nn, method = "nnet", maxit = 7000,
tuneGrid = my.grid, trace = F, linout = F)
model <- P1.fit$bestTune
P1.fit$bestTune
predicted <- predict(P1.fit, newdata = val_nn)
prestige.rmse <- sqrt(mean((predicted - val_resp)^2))
prestige.rmse
results <- as.data.frame(cbind(val_nn, val_resp, predicted))
ggplot(results, aes(x = Price, y = val_resp))+
geom_point(size = 4)+
geom_point(aes(y = predicted), col = "red")
P1.fit <- train(f, data = train_nn, method = "nnet", maxit = 7000,
tuneGrid = my.grid, trace = F, linout = 1)
model <- P1.fit$bestTune
predicted <- predict(P1.fit, newdata = val_nn)
prestige.rmse <- sqrt(mean((predicted - val_resp)^2))
prestige.rmse
results <- as.data.frame(cbind(val_nn, val_resp, predicted))
ggplot(results, aes(x = Price, y = val_resp))+
geom_point(size = 4)+
geom_point(aes(y = predicted), col = "red")
model
my.grid <- expand.grid(.decay = c(0.1, 0.05, 0.01), .size = c(3, 4, 5, 6, 7, 8, 9))
P1.fit <- train(f, data = train_nn, method = "nnet", maxit = 7000,
tuneGrid = my.grid, trace = F, linout = 1)
model <- P1.fit$bestTune
model
predicted <- predict(P1.fit, newdata = val_nn)
prestige.rmse <- sqrt(mean((predicted - val_resp)^2))
prestige.rmse
results <- as.data.frame(cbind(val_nn, val_resp, predicted))
ggplot(results, aes(x = Price, y = val_resp))+
geom_point(size = 4)+
geom_point(aes(y = predicted), col = "red")
View(results)
rdois <- lm(val_resp ~ predicted, data = results)
summary(rdois)$r.squared
val_nn$QTY_ORDER < val_resp
val_nn$QTY_ORDER <- val_resp
View(val_nn)
vall_rescaled <- val_nn* rep(b, each = nrow(val_nn)) + rep (a, each = nrow(val_nn))
results_sc <- cbind(results$predicted, val_nn[2:3])
results_sc <-  results_sc*rep(b, each = nrow(results_sc)) + rep (a, each = nrow(results_sc))
View(results_sc)
View(val_nn)
View(vall_rescaled)
P1.fit <- train(f, data = train_nn, method = "neuralnet", maxit = 7000,
tuneGrid = my.grid, trace = F, linout = 1)
View(data_P2)
val_nn_temp <- val_nn$Price
val_nn$Price <- NULL
View(val_nn)
val_nn$Price <- val_nn_temp
View(val_nn)
vall_rescaled <- val_nn* rep(b, each = nrow(val_nn)) + rep (a, each = nrow(val_nn))
View(vall_rescaled)
View(data_P2)
results_sc <- cbind(results$predicted, val_nn[1:3])
View(results_sc)
results_sc <- cbind(val_nn[1:2], results$predicted, val_nn[4])
results_sc <-  results_sc*rep(b, each = nrow(results_sc)) + rep (a, each = nrow(results_sc))
View(vall_rescaled)
results_scaled <- as.data.frame(cbind(vall_rescaled, results_sc[3]))
View(results_scaled)
names(results_scaled) <- c("month", "day", "QTY_ORDER", "Price", "ANN_QTY")
error <- results_scaled$QTY_ORDER - results_scaled$ANN_QTY
RMSE <- rmse(error)
RMSE
RMSE_SC <- sqrt(mean(results_scaled$QTY_ORDER - results_scaled$ANN_QTY)^2)
RMSE_SC
plot(results_scaled$QTY_ORDER ~ results_scaled$ANN_QTY)
abline(0,1, col = "red")
rdois <- lm(results_scaled$QTY_ORDER ~ results_scaled$ANN_QTY, data = results_scaled)
summary(rdois)$r.squared
pred_all <- predict(P1.fit, newdata = train_nn)
View(train_nn)
train_temp_qty <- train_nn$QTY_ORDER
train_nn$QTY_ORDER <-
pred_all <- predict(P1.fit, newdata = train_nn)
train_nn$QTY_ORDER <- NULL
pred_all <- predict(P1.fit, newdata = train_nn)
P1.fit$results
P1.fit$pred
P1.fit$trainingData
?nnet
P1.fit$finalModel
View(train_nn)
train_temp_price <- train_nn$Price
train_nn$Price <- NULL
train_$QTY_ORDER <- train_temp_qty
train_nn$QTY_ORDER <- train_temp_qty
train_nn$Price <- train_temp_price
train_rescaled <- train_nn* rep(b, each = nrow(train_nn)) + rep (a, each = nrow(train_nn))
full_results_sc <- cbind(train_nn[1:2], pred_all, train_nn[4])
View(full_results_sc)
full_results_sc <-  full_results_sc*rep(b, each = nrow(full_results_sc)) + rep (a, each = nrow(full_results_sc))
View(results_scaled)
full_data <- rbind(full_results_sc, results_scaled)
View(results_scaled)
View(full_results_sc)
full_data <- as.data.frame(cbind(train_rescaled, full_results_sc[3]))
View(full_data)
View(results_scaled)
full_data <- rbind(full_data, results_scaled)
names(full_data) <- c("month", "day", "QTY_ORDER", "Price", "ANN_QTY")
full_data <- rbind(full_data, results_scaled)
ggplot(full_data, aes(x = Price, y = QTY_ORDER))+
geom_point(size = 4)+
geom_point(aes(y = ANN_QTY), col = "red")
rdois_full <- lm(full_data$QTY_ORDER ~ full_data$ANN_QTY, data = full_data)
summary(rdois_full)$r.squared
ggplot(full_data, aes(x = Price, y = QTY_ORDER))+
geom_point(size = 4)+
geom_point(aes(y = ANN_QTY), col = "red")+
xlab("Preço")+
ylab("Quantidade P1")
View(train_nn)
View(val_nn)
nn <- neuralnet(f, train_nn, rep = 50, hidden = 5, threshold = 0.001,
linear.output = FALSE)
predicted <- compute(nn, val_nn)
View(val_nn)
val_nn_temp_2 <- val_nn$QTY_ORDER
val_nn$QTY_ORDER <- NULL
predicted <- compute(nn, val_nn)
results <- as.data.frame(cbind(val_nn, val_nn_temp_2, predicted$net.result))
RMSE_nn <- sqrt(mean(val_nn_temp_2 - predicted$net.result)^2)
RMSE_nn
ggplot(results, aes(x = Price, y = val_nn_temp_2))+
geom_point(size = 4)+
geom_point(aes(y = predicted$net.result), col = "red")
rdois <- lm(val_nn_temp_2 ~ predicted$net.result, data = results)
summary(rdois)$r.squared
plot(results$val_nn_temp_2, predicted$net.result)
abline(0,1, col = "red")
library(e1071)
set.seed(12345)
split = sample.split(data_P2$Price, SplitRatio = 0.75)
train <- subset(data_P2, split == TRUE)
val <- subset(data_P2, split == FALSE)
model_svm <- svm(f, data = train, scale = TRUE, kernel = 'radial',
cachesize = 1600, cross = 5, epsilon = 0.1)
svm_val <- predict(model_svm, val)
results_svm <- as.data.frame(cbind(val, svm_val))
RMSE_SVM <-  sqrt(mean(results_svm$QTY_ORDER - svm_val)^2)
RMSE_SVM
View(results_svm)
rdois <- lm(QTY_ORDER ~ svm_val, data = results_svm)
summary(rdois)$r.squared
summary(model_svm)
plot(results_svm$QTY_ORDER, results_svm$svm_val)
abline(0,1, col = "red")
abline(rdois, col = "blue")
ggplot(results_svm, aes(x = Price, y = QTY_ORDER))+
geom_point(size = 4)+
geom_point(aes(y = results_svm$svm_val), col = "red")
ggplot(results_svm, aes(x = Price, y = QTY_ORDER))+
geom_point(size = 4)+
geom_point(aes(y = results_svm$svm_val), col = "red")+
xlab("Preço")+
ylab("Quantidade P1")
model_tuned <- tune(svm, f, data = train, scale = TRUE, kernel = 'radial',
cachesize = 2000, ranges = list(epsilon = seq(0,1,0.1), cost = 2^(2:9)))
print(model_tuned)
plot(model_tuned)
model_P1 <- model_tuned$best.model
results_tuned_svm <- predict(model_P1, val)
results_svm_ref <- as.data.frame(cbind(val, results_tuned_svm))
RMSE_SVM <-  sqrt(mean(results_svm_ref$QTY_ORDER - results_tuned_svm)^2)
RMSE_TUNED_SVM <-  sqrt(mean(results_svm_ref$QTY_ORDER - results_tuned_svm)^2)
RMSE_TUNED_SVM
rdois <- lm(QTY_ORDER ~ results_svm, data = results_svm_ref)
View(results_svm_ref)
rdois <- lm(QTY_ORDER ~ results_tuned_svm, data = results_svm_ref)
summary(rdois)$r.squared
View(data_P2)
svm_full <- predict(model_svm, data_P2)
full_results_svm <- as.data.frame(cbind(data_P2, svm_full))
View(full_results_svm)
RMSE_SVM <-  sqrt(mean(full_results_svm$QTY_ORDER - svm_full)^2)
RMSE_SVM
summary(model_svm)
rdois_2 <- lm(QTY_ORDER ~ svm_full, data = full_results_svm)
summary(rdois_2)$r.squared
ggplot(full_results_svm, aes(x = Price, y = QTY_ORDER))+
geom_point(size = 4)+
geom_point(aes(y = full_results_svm$svm_full), col = "red")+
xlab("Preço")+
ylab("Quantidade P1")
