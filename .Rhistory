library(caTools)
set.seed(123)
maxs <- apply(P2[,3:5], 2, max) # only the numeric columns
mins <- apply(P2[,3:5], 2, min)
P2_scaled <- as.data.frame(scale(P2[,3:5], center = mins, scale = maxs - mins))
View(P2_scaled)
plot(P2_scaled$Price, P2_scaled$QTY_ORDER)
plot(log(P2_scaled$Price), P2_scaled$QTY_ORDER)
plot(P2_scaled$Price, log(P2_scaled$QTY_ORDER))
names(P2_scaled)
reg2 <- lm(QTY_ORDER ~ REVENUE + Price, data = P2_scaled)
reg2
summary(reg2)
plot(P2_scaled$Price, P2_scaled$QTY_ORDER)
abline(reg2)
feats <- names(P2_scaled)
feats <- names(P2_scaled)[2:3]
f <- paste(feats, collapse = " + ")
f <- paste("QTY_ORDER ~", f)
f <- as.formula(paste("QTY_ORDER ~", f))
f <- paste("QTY_ORDER ~", f)
feats <- names(P2_scaled)[2:3]
f <- paste(feats, collapse = " + ")
f <- as.formula(paste("QTY_ORDER ~", f))
library(neuralnet)
split = sample.split(P2_scaled$Price, SplitRatio = 0.80)
train_nn <- subset(P2_scaled, split == TRUE)
val_nn <- subset(P2_scaled, split == FALSE)
?neuralnet
nn <- neuralnet(f, train_nn, hidden = 5, linear.output = FALSE)
plot(nn)
predicted <- compute(nn, val_nn[2:3])
print(head(predicted$net.result)
print(model_P1)
plot(model_P1)
model_P1t <- model_P1$best.model
summary(model_P1t)
svm_val <- predict(model_P1t, val_nn)
error <- val_nn$QTY_ORDER - svm_val
RMSE <- rmse(error)
RMSE
res_P1 <- as.data.frame(cbind(val_nn$QTY_ORDER, svm_val))
# r2 validation sample
rdois <- lm(V1 ~ svm_val, data = res_P1)
summary(rdois)$r.squared
plot(res_P1$V1, res_P1$svm_val)
print(head(predicted$net.result))
results <- as.data.frame(cbind(P2_scaled, predicted$net.result))
results <- as.data.frame(cbind(val_nn, predicted$net.result))
View(results)
error <- val_nn$QTY_ORDER - predicted$net.result
RMSE <- rmse(error)
RMSE
rdois <- lm(QTY_ORDER ~ predicted$net.result, data = results)
summary(rdois)$r.squared
plot(results$QTY_ORDER, predicted$net.result)
abline(rdois, col = "red")
resid(rdois)
plot(density(resid(rdois)))
qqnorm(resid(rdois))
plot(density(resid(rdois)))
ggplot(results, aes(x = Price, y = QTY_ORDER))+
geom_point()
ggplot(results, aes(x = Price, y = QTY_ORDER))+
geom_point()+
geom_point(aes(y = predicted$net.result), col = "red")
nn <- neuralnet(f, train_nn, hidden = 7, linear.output = FALSE)
plot(nn)
nn <- neuralnet(f, train_nn, hidden = 5, linear.output = FALSE)
plot(nn)
nn <- neuralnet(f, train_nn, hidden = 3, linear.output = FALSE)
plot(nn)
feats <- names(P2_scaled)[3]
f <- paste(feats, collapse = " + ")
f <- as.formula(paste("QTY_ORDER ~", f))
split = sample.split(P2_scaled$Price, SplitRatio = 0.80)
train_nn <- subset(P2_scaled, split == TRUE)
val_nn <- subset(P2_scaled, split == FALSE)
nn <- neuralnet(f, train_nn, hidden = 5, linear.output = FALSE)
plot(nn)
nn <- neuralnet(f, train_nn, hidden = 3, linear.output = FALSE)
plot(nn)
nn <- neuralnet(f, train_nn, hidden = 1, linear.output = FALSE)
plot(nn)
nn <- neuralnet(f, train_nn, hidden = 6, linear.output = FALSE)
plot(nn)
nn <- neuralnet(f, train_nn, hidden = 2, linear.output = FALSE)
plot(nn)
View(val_nn)
predicted <- compute(nn, val_nn[3])
print(head(predicted$net.result))
results <- as.data.frame(cbind(val_nn, predicted$net.result))
View(results)
error <- val_nn$QTY_ORDER - predicted$net.result
RMSE <- rmse(error)
RMSE
rdois <- lm(QTY_ORDER ~ predicted$net.result, data = results)
summary(rdois)$r.squared
plot(results$QTY_ORDER, predicted$net.result)
abline(rdois, col = "red")
plot(density(resid(rdois)))
plot(density(resid(rdois)))
ggplot(results, aes(x = Price, y = QTY_ORDER))+
geom_point()+
geom_point(aes(y = predicted$net.result), col = "red")
results <- as.data.frame(cbind(val_nn, predicted$net.result))
error <- val_nn$QTY_ORDER - predicted$net.result
RMSE <- rmse(error)
RMSE
rdois <- lm(QTY_ORDER ~ predicted$net.result, data = results)
summary(rdois)$r.squared
plot(results$QTY_ORDER, predicted$net.result)
plot(results$QTY_ORDER, predicted$net.result)
plot(results$QTY_ORDER, predicted$net.result)
View(results)
feats <- names(P2_scaled)[2:3]
f <- paste(feats, collapse = " + ")
f <- as.formula(paste("QTY_ORDER ~", f))
library(neuralnet)
split = sample.split(P2_scaled$Price, SplitRatio = 0.80)
train_nn <- subset(P2_scaled, split == TRUE)
val_nn <- subset(P2_scaled, split == FALSE)
nn <- neuralnet(f, train_nn, hidden = 5, linear.output = FALSE)
plot(nn)
predicted <- compute(nn, val_nn[2:3])
print(head(predicted$net.result))
results <- as.data.frame(cbind(val_nn, predicted$net.result))
View(results)
error <- val_nn$QTY_ORDER - predicted$net.result
RMSE <- rmse(error)
RMSE
rdois <- lm(QTY_ORDER ~ predicted$net.result, data = results)
summary(rdois)$r.squared
plot(results$QTY_ORDER, predicted$net.result)
abline(rdois, col = "red")
abline(0,1 col = "red")
abline(0,1, col = "red")
plot(results$QTY_ORDER, predicted$net.result)
abline(0,1, col = "red")
plot(density(resid(rdois)))
ggplot(results, aes(x = Price, y = QTY_ORDER))+
geom_point()+
geom_point(aes(y = predicted$net.result), col = "red")
library(e1071)
model_svm <- svm(f, data = train_nn, scale = FALSE, kernel = 'radial',
cachesize = 1800, cross = 5, epsilon = 0.2)
model_svm
plot(model_svm)
plot(model_svm)
predicted_svm <- predict(model_svm, val_nn[2:3])
head(predicted_svm)
results_svm <- as.data.frame(cbind(val_nn, predicted_svm))
View(results_svm)
error <- val_nn$QTY_ORDER - predicted_svm
RMSE <- rmse(error)
RMSE
rdois <- lm(QTY_ORDER ~ predicted_svm, data = results)
summary(rdois)$r.squared
plot(results$QTY_ORDER, predicted_svm)
abline(0,1, col = "red")
plot(density(resid(rdois)))
ggplot(results, aes(x = Price, y = QTY_ORDER))+
geom_point()+
geom_point(aes(y = predicted$net.result), col = "red")
ggplot(results_svm, aes(x = Price, y = QTY_ORDER))+
geom_point()+
geom_point(aes(y = predicted_svm), col = "red")
model_svm <- tune(svm, f, data = train_nn, scale = FALSE, kernel = 'radial',
cachesize = 1800, ranges = list(epsilon = seq(0,1,0.1), cost = 2^(2:9)))
model_svm <- tune(svm, f, data = train_nn, scale = FALSE, kernel = 'radial',
cachesize = 1800, ranges = list(epsilon = seq(0,1,0.1), cost = 2^(2:9)))
tuneResult <- tune(svm, f, data = train_nn, scale = FALSE, kernel = 'radial',
cachesize = 800, ranges = list(epsilon = seq(0,1,0.1), cost = 2^(2:9)))
f
tuneResult <- tune(svm, QTY_ORDER ~ Price, data = train_nn, scale = FALSE, kernel = 'radial',
cachesize = 800, ranges = list(epsilon = seq(0,1,0.1), cost = 2^(2:9)))
View(train_nn)
?neuralnet
nn_bck <- neuralnet(f, train_nn, hidden = 5, learningrate = 0.01, algorithm =  "backprop",
err.fct = "ce", linear.output = FALSE)
nn_bck <- neuralnet(f, train_nn, hidden = 5, learningrate = 0.01, algorithm =  "backprop",
linear.output = FALSE)
plot(nn_bck)
predicted <- compute(nn_bck, val_nn[2:3])
nn_bck$result.matrix
print(head(predicted$net.result))
results <- as.data.frame(cbind(val_nn, predicted$net.result))
View(results)
error <- val_nn$QTY_ORDER - predicted$net.result
RMSE <- rmse(error)
RMSE
rdois <- lm(QTY_ORDER ~ predicted$net.result, data = results)
summary(rdois)$r.squared
plot(results$QTY_ORDER, predicted$net.result)
abline(0,1, col = "red")
plot(density(resid(rdois)))
ggplot(results, aes(x = Price, y = QTY_ORDER))+
geom_point()+
geom_point(aes(y = predicted$net.result), col = "red")
vall_rescaled <- val_nn*((maxs-mins))+mins
View(vall_rescaled)
View(P2_scaled)
View(P2)
View(vall_rescaled)
View(results)
res_rescaled <-  predicted$net.result*((maxs-mins))+mins
View(res_rescaled)
View(vall_rescaled)
plot(vall_rescaled$QTY_ORDER, res_rescaled)
vall_rescaled <- round(val_nn*((maxs-mins))+mins, 0)
res_rescaled <-  round(predicted$net.result*((maxs-mins))+mins,0)
results_scaled <- as.data.frame(cbind(vall_rescaled, res_rescaled))
View(results_scaled)
error <- results_scaled$QTY_ORDER - results_scaled$res_rescaled
RMSE <- rmse(error)
RMSE
rdois <- lm(results_scaled$QTY_ORDER ~ results_scaled$res_rescaled, data = results_scaled)
summary(rdois)$r.squared
plot(results_scaled$QTY_ORDER ~ results_scaled$res_rescaled)
abline(0,1, col = "red")
plot(density(resid(rdois)))
ggplot(results_scaled, aes(x = Price, y = QTY_ORDER))+
geom_point()+
geom_point(aes(y = res_rescaled), col = "red")
ggplot(results_scaled, aes(x = Price, y = QTY_ORDER))+
geom_point()
ggplot(results_scaled, aes(x = Price, y = QTY_ORDER))+
geom_point(size = 4)
ggplot(results_scaled, aes(x = Price, y = QTY_ORDER))+
geom_point(size = 4)+
geom_point(aes(y = res_rescaled), col = "red")
View(P2)
View(P2)
vall_rescaled <- round(val_nn*((maxs-mins))+mins, 0)
View(vall_rescaled)
P2_scaled <- as.data.frame(scale(P2[,3:5], scale = maxs - mins))
View(P2_scaled)
P2_rescaled <- as.data.frame(P2_scaled*((maxs-mins))+mins)
all(P2_rescaled == P2)
all(P2_rescaled == P2[,3:5])
View(P2_rescaled)
install.packages("scales")
library(scales)
P2_rescaled <- as.data.frame(rescale_mid(P2_scaled, to = c(maxs-mins),
mid = mins))
scaleList <- list(scale = attr(P2_scaled, "scaled:scale"),
center = attr(P2_scaled, "scaled:center"))
P2_rescaled <- P2_scaled*scaleList$scale+scaleList$center
all(P2_rescaled == P2[,3:5])
View(P2_rescaled)
View(P2_scaled)
P2_rescaled <- P2_scaled*scaleList$scale["QTY_ORDER"] + scaleList$center["QTY_ORDER"]
attr(,"scaled:scale")
scaleList
?scale
P2_scaled <- as.data.frame(scale(P2[,3:5], center = mins, scale = maxs - mins))
P2_scaled <- as.data.frame(scale(P2[,3:5], center = mins, scale = c(-1,1)))
install.packages("scales")
library(scales)
P2_scaled <- rescale(P2[,3:5])
data_p2 <- P2[,3:5]
View(data_p2)
P2_scaled <- rescale(data_p2)
str(data_p2)
data_p2$QTY_ORDER <- as.numeric(data_p2$QTY_ORDER)
str(data_p2)
P2_scaled <- rescale(data_p2)
P2_scaled <- as.data.frame(scale(P2[,3:5], center = mins, scale = maxs - mins))
scaleList <- list(scale = attr(P2_scaled, "scaled:scale"),
center = attr(P2_scaled, "scaled:center"))
scaleList
P2_rescaled <- P2_scaled*(maxs-mins)/mins
View(P2_rescaled)
View(P2_scaled)
View(P2_rescaled)
View(P2)
View(P2_rescaled)
?apply
P2_scaled <- apply(P2[,3:5], 2, function{x}x = x-mins/maxs-mins)
P2_scaled <- apply(P2[,3:5], 2, function(x),x = x-mins/maxs-mins)
P2_scaled <- scale(data_p2)
View(P2_scaled)
scaleList <- list(scale = attr(data_p2, "scaled:scale"),
center = attr(data_p2, "scaled:center"))
scaleList
P2_scaled <- apply(P2[,3:5], 2, function(x){x = x-mins/(maxs-mins)})
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
normdf <- as.data.frame(lapply(P2[,3:5], normalize))
View(normdf)
View(P2_scaled)
?data.frame
df <- data.frame(x = 1:5, y = 1:5)
df
?diff
mu <- colMeans(data_p2)
sd <- sapply(df, data_p2)
sd <- sapply(data_p2, sd)
scaled <- t((t(as.matrix(data_p2)) - mu) / sd) # z-score-normalize
all(scaled == scale(df, center = T, scale = T)) # check the scaled matrix is same as obtained from scale()
all(scaled == scale(data_p2, center = T, scale = T)) # check the scaled matrix is same as obtained from scale()
scaled <- t((t(as.matrix(data_p2)) - mu) / sd) # z-score-normalize
all(scaled == scale(data_p2, center = T, scale = T)) # check the scaled matrix is same as obtained from scale()
mu <- colMeans(data_p2)
sd <- sapply(data_p2, sd)
scaled <- t((t(as.matrix(data_p2)) - mu) / sd) # z-score-normalize
all(scaled == scale(data_p2, center = T, scale = T)) # check the scaled matrix is same as obtained from scale()
?rep
setwd("C:/Users/Marcelo/Desktop/Data/B2WLabs/")
rm(list = ls())
rmse <- function(error)
{
sqrt(mean(error^2))
}
P2 <- read.csv("PROD_2.csv", sep = " ", header = TRUE, stringsAsFactors = FALSE)
cor(log(P2$QTY_ORDER), log(P2$Price))
plot(log(P2$Price), log(P2$QTY_ORDER))
regp2 <- lm(log(P2$QTY_ORDER) ~ log(P2$Price), data = P2)
plot(log(P2$Price), log(P2$QTY_ORDER))
abline(regp2)
maxs <- apply(P2[,3:5], 2, max)
mins <- apply(P2[,3:5], 2, min)
P2_scaled <- as.data.frame(scale(P2[,3:5], center = mins, scale = maxs - mins))
attr(P2_scaled, "scaled:scale")
df <- data.frame(x = 1:5, y = 5:10, z = 10:15)
?data.frame
df <- data.frame(x = 1:5, y = 5:10)
df <- data.frame(x = 1:5, y = 1:5)
df
maxs <- apply(df, 2, mix)
maxs <- apply(df, 2, max)
maxs <- apply(df, 2, max)
mins <- apply(df, 2, min)
scaled_df <- as.data.frame(scale(df, center = mins, scale = maxs - mins))
scaled_df
b <- attr(scaled_df, "scaled:scale")
a <- attr(scaled_df, "scaled:center")
b <- maxs - mins
a <- mins
backscaled <- scaled_df * rep(b, each = nrow(scaled_df)) + rep(a, each = nrow(scaled_df))
View(backscaled)
data_P2 <- P2[,3:5]
maxs <- apply(data_P2, 2, max)
mins <- apply(data_P2, 2, min)
P2_scaled <- as.data.frame(scale(data_P2, center = mins, scale = maxs - mins))
plot(P2_scaled$Price, P2_scaled$QTY_ORDER)
b <- maxs - mins
a <- mins
backscaled <- P2_scaled * rep(b, each = nrow(P2_scaled)) + rep(a, each = nrow(P2_scaled))
View(backscaled)
View(data_P2)
names(P2_scaled)
feats <- names(P2_scaled)[2:3]
f <- paste(feats, collapse = " + ")
f <- as.formula(paste("QTY_ORDER ~", f))
f
library(neuralnet)
split = sample.split(P2_scaled$Price, SplitRatio = 0.80)
train_nn <- subset(P2_scaled, split == TRUE)
library(caTools)
split = sample.split(P2_scaled$Price, SplitRatio = 0.80)
train_nn <- subset(P2_scaled, split == TRUE)
val_nn <- subset(P2_scaled, split == FALSE)
nn <- neuralnet(f, train_nn, hidden = 5, linear.output = FALSE)
plot(nn)
predicted <- compute(nn, val_nn[2:3])
print(head(predicted$net.result))
results <- as.data.frame(cbind(val_nn, predicted$net.result))
error <- val_nn$QTY_ORDER - predicted$net.result
RMSE <- rmse(error)
RMSE
rdois <- lm(QTY_ORDER ~ predicted$net.result, data = results)
summary(rdois)$r.squared
plot(results$QTY_ORDER, predicted$net.result)
abline(0,1, col = "red")
plot(density(resid(rdois)))
ggplot(results, aes(x = Price, y = QTY_ORDER))+
geom_point()+
geom_point(aes(y = predicted$net.result), col = "red")
vall_rescaled <- val_nn* rep(b, each = nrow(val_nn)) + rep(a, each = nrow(val_nn)
res_rescaled <-  round(predicted$net.result*((maxs-mins))+mins,0)
results_scaled <- as.data.frame(cbind(vall_rescaled, res_rescaled))
error <- results_scaled$QTY_ORDER - results_scaled$res_rescaled
RMSE <- rmse(error)
RMSE
# r2 validation sample
rdois <- lm(results_scaled$QTY_ORDER ~ results_scaled$res_rescaled, data = results_scaled)
summary(rdois)$r.squared
plot(results_scaled$QTY_ORDER ~ results_scaled$res_rescaled)
abline(0,1, col = "red")
ggplot(results_scaled, aes(x = Price, y = QTY_ORDER))+
geom_point(size = 4)+
geom_point(aes(y = res_rescaled), col = "red")
vall_rescaled <- val_nn* rep(b, each = nrow(val_nn)) + rep (a, each = nrow(val_nn))
View(vall_rescaled)
View(results)
results_sc <- cbind(predicted$net.result, val_nn[2:3])
View(results_sc)
results_sc <-  results_sc*rep(b, each = nrow(results_sc)) + rep (a, each = nrow(results_sc))
View(vall_rescaled)
results_scaled <- as.data.frame(cbind(vall_rescaled, results_sc[1]))
View(results_scaled)
error <- results_scaled$QTY_ORDER - results_scaled$res_rescaled
RMSE <- rmse(error)
RMSE
error <- results_scaled$QTY_ORDER - results_scaled$predicted$net.result
RMSE <- rmse(error)
names(results_scaled) <- c("QTY_ORDER", "REVENUE", "PRICE", "ANN_QTY")
error <- results_scaled$QTY_ORDER - results_scaled$ANN_QTY
RMSE <- rmse(error)
RMSE
rdois <- lm(results_scaled$QTY_ORDER ~ results_scaled$ANN_QTY, data = results_scaled)
summary(rdois)$r.squared
plot(results_scaled$QTY_ORDER ~ results_scaled$ANN_QTY)
abline(0,1, col = "red")
ggplot(results_scaled, aes(x = Price, y = QTY_ORDER))+
geom_point(size = 4)
library(ggplot2)
ggplot(results_scaled, aes(x = Price, y = QTY_ORDER))+
geom_point(size = 4)
ggplot(results_scaled, aes(x = PRICE, y = QTY_ORDER))+
geom_point(size = 4)
ggplot(results_scaled, aes(x = PRICE, y = QTY_ORDER))+
geom_point(size = 4)+
geom_point(aes(y = ANN_QTY), col = "red")
rm(list = ls())
rmse <- function(error)
{
sqrt(mean(error^2))
}
P2 <- read.csv("PROD_2.csv", sep = " ", header = TRUE, stringsAsFactors = FALSE)
rm(list = ls())
P3 <- read.csv("PROD_3.csv", sep = " ", header = TRUE, stringsAsFactors = FALSE)
cor(log(P3$QTY_ORDER), log(P3$Price))
plot(log(P3$Price), log(P3$QTY_ORDER))
cor(P3$QTY_ORDER, P3$Price)
plot(P3$Price, P3$QTY_ORDER)
plot(log(P3$Price), P3$QTY_ORDER)
plot(log(P3$Price), log(P3$QTY_ORDER))
View(P3)
regp3 <- lm(log(P2$QTY_ORDER) ~ log(P2$Price), data = P3)
regp3 <- lm(log(P3$QTY_ORDER) ~ log(P3$Price), data = P3)
plot(log(P3$Price), log(P3$QTY_ORDER))
abline(regp3)
data_P3 <- P3[,3:5]
split = sample.split(data_P3$Price, SplitRatio = 0.80)
train <- subset(data_P3, split == TRUE)
val <- subset(data_P3, split == FALSE)
library(e1071)
model_svm <- svm(QTY_ORDER ~ . , data = train, scale = TRUE, kernel = 'radial',
cachesize = 400, cross = 5, epsilon = 0.1)
model_svm <- tune(svm, QTY_ORDER ~ . , data = train, scale = TRUE, kernel = 'radial',
cachesize = 800, ranges = list(epsilon = seq(0,1,0.1), cost = 2^(2:9)))
print(model_svm)
plot(model_svm)
View(data_P3)
model_svm <- tune(svm, QTY_ORDER ~ Price , data = train, scale = TRUE, kernel = 'radial',
cachesize = 800, ranges = list(epsilon = seq(0,1,0.1), cost = 2^(2:9)))
print(model_svm)
plot(model_svm)
tuneResult <- tune(svm, QTY_ORDER ~ Price , data = train, scale = TRUE, kernel = 'radial',
cachesize = 1800, ranges = list(epsilon = seq(0.3,0.7,0.01), cost = 2^(2:9)))
print(tuneResult)
plot(tuneResult)
summary(model_svm)
View(val)
results <- predict(model_svm, val[3])
results <- compute(model_svm, val[3])
results <- compute(model_svm, val)
model_P3 <- model_svm$best.model
results <- predict(model_P3, val[3])
errorTunedModel <- val$Price - results
tunedModelRMSE <-rmse(errorTunedModel)
rmse <- function(error)
{
sqrt(mean(error^2))
}
tunedModelRMSE <-rmse(errorTunedModel)
tunedModelRMSE
results <- as.data.frame(cbind(val, results))
View(results)
rdois <- lm(QTY_ORDER ~ results, data = results)
summary(rdois)$r.squared
plot(results$QTY_ORDER, results$results)
abline(0,1, col = "red")
plot(density(resid(rdois)))
library(ggplot2)
ggplot(results, aes(x = Price, y = QTY_ORDER))+
geom_point()+
geom_point(aes(y = results), col = "red")
model_svm <- tune(svm, QTY_ORDER ~ ., data = train, scale = TRUE, kernel = 'radial',
cachesize = 1800, ranges = list(epsilon = seq(0,1,0.1), cost = 2^(2:9)))
print(model_svm)
plot(model_svm)
summary(model_svm)
model_P3 <- model_svm$best.model
results <- predict(model_P3, val[3])
results <- predict(model_P3, val)
errorTunedModel <- val$Price - results
tunedModelRMSE <-rmse(errorTunedModel)
tunedModelRMSE
results <- as.data.frame(cbind(val, results))
rdois <- lm(QTY_ORDER ~ results, data = results)
summary(rdois)$r.squared
plot(results$QTY_ORDER, results$results)
abline(0,1, col = "red")
plot(density(resid(rdois)))
library(ggplot2)
ggplot(results, aes(x = Price, y = QTY_ORDER))+
geom_point(size = 4)+
geom_point(aes(y = results), col = "red")
